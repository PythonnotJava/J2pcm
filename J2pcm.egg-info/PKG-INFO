Metadata-Version: 2.4
Name: J2pcm
Version: 0.1.0
Summary: `J2pcm` is designed for `Json Object to Python Class Model`.The code generated by J2pcm is statically `typed` and even `type-safe`.
Home-page: https://github.com/PythonnotJava/J2pcm
Author: PythonnotJava
Author-email: 2565497078@qq.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Code Generators
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python
Dynamic: summary

# J2pcm

## 🤔 What's this ?
`J2pcm` is designed for `Json Object to Python Class Model`.The code generated by J2pcm is statically `typed` and even `type-safe`.

---

## 🐍 Dependecies

$$
Python \ge 3.12 
$$

---


## 🛠️ Install 
```text
pip install 
```

## 💡 Support
- Json to basic class.
- Json to [`TypedDict`](https://peps.python.org/pep-0589/) class.
- Json to [`dataclass`](https://docs.python.org/zh-cn/3/library/dataclasses.html#dataclasses.dataclass) class.
- Json to [`Protocol`](https://docs.python.org/zh-cn/3/library/typing.html#typing.Protocol) interface.
- Json to multiple classes.

---

## 📁 File Structure
```text
--J2pcm(Package)
|----__init__.py
|----cli.py
|----json_to_base_class_model.py
|----json_to_dataclass_model.py
|----json_to_nested_parallel_class.py
|----json_to_property_model.py
|----json_to_protocol_model.py
|----json_to_typed_dict_class_model.py
```

---

## { } Example

### mutable.json
```json
{
  "name": "Ann",
  "age": 22,
  "isStudent": false,
  "grades": [90, 85, 82],
   "scores": [9, 8.4, 5],
  "address": {
    "city": "Unknow.",
    "pos" : {
    }
  },
  "pos" : null,
  "z" : null
}
```

### code
```python
from J2pcm import generate_nested_parallel_class

generate_nested_parallel_class(
    fileName='J2pcm/example/mutable.json',
    output='output.py',
    root_class_name='Root',
    headers='from typing import Any'
)
```

### output.py
```python
from typing import Any
import json

class RootAddressPos:
    @classmethod
    def from_dict(cls, *args) -> "RootAddressPos":
        return cls()

    @classmethod
    def fromJson(cls, *args) -> "RootAddressPos":
        return cls()

    def toJson(self, *args) -> dict:
        return {}

class RootAddress:
    def __init__(self, city: str, pos: RootAddressPos):
        self.city = city
        self.pos = pos

    @classmethod
    def from_dict(cls, data: dict) -> "RootAddress":
        return cls(
            city=data['city'],
            pos=RootAddressPos.from_dict(data['pos'])
        )

    @classmethod
    def fromJson(cls, filename: str, encoding: str = 'u8') -> "RootAddress":
        with open(filename, 'r', encoding=encoding) as f:
            data = json.load(f)
        return cls.from_dict(data)

    def toJson(self) -> dict:
        return {
            "city": self.city,
            "pos": self.pos.toJson(),
        }

class Root:
    def __init__(self, name: str, age: int, isStudent: bool, grades: list[int], scores: list[int], address: RootAddress, pos: Any, z: Any):
        self.name = name
        self.age = age
        self.isStudent = isStudent
        self.grades = grades
        self.scores = scores
        self.address = address
        self.pos = pos
        self.z = z

    @classmethod
    def from_dict(cls, data: dict) -> "Root":
        return cls(
            name=data['name'],
            age=data['age'],
            isStudent=data['isStudent'],
            grades=data['grades'],
            scores=data['scores'],
            address=RootAddress.from_dict(data['address']),
            pos=data['pos'],
            z=data['z']
        )

    @classmethod
    def fromJson(cls, filename: str, encoding: str = 'u8') -> "Root":
        with open(filename, 'r', encoding=encoding) as f:
            data = json.load(f)
        return cls.from_dict(data)

    def toJson(self) -> dict:
        return {
            "name": self.name,
            "age": self.age,
            "isStudent": self.isStudent,
            "grades": self.grades,
            "scores": self.scores,
            "address": self.address.toJson(),
            "pos": self.pos,
            "z": self.z,
        }
``` 
